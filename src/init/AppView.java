package init;

import view.CompileView;

/**
 * Classe principal da aplicação que representa a janela principal do sistema.
 * Estende {@link javax.swing.JFrame} e exibe a {@link CompileView}.
 * Implementa o padrão Singleton para garantir uma única instância da janela.
 * 
 * @author Lucas Gabriel Henschel
 */
public class AppView extends javax.swing.JFrame {
    
    /** Instância única do AppView (Singleton) */
    public static AppView appView;

    /**
     * Construtor da classe AppView.
     * Inicializa os componentes gráficos e exibe a CompileView.
     */
    public AppView() {
        initComponents();
        init();
    }
    
    /**
     * Retorna a instância única do AppView.
     * Caso ainda não exista, cria uma nova instância.
     * 
     * @return instância singleton de AppView
     */
    public static AppView getAppView() {
        if (appView == null) {
            appView = new AppView();
        }
        return appView;
    }
    
    /**
     * Inicializa a aplicação, exibindo a CompileView.
     */
    private void init() {
        showCompileView();
    }
    
    /**
     * Exibe a janela de edição de código (CompileView) na interface.
     */
    private void showCompileView() {
        CompileView compileView = CompileView.getCompileView();
        compileView.screen();
        compileView.setVisible(true);
    }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(AppView.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(AppView.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(AppView.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(AppView.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        new AppView();
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
}
